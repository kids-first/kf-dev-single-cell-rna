cwlVersion: v1.2
class: Workflow
id: kf_single_cell_10x
label: "KFDRC single cell RNA 10x workflow"

doc: |-
  # KFDRC single cell RNA 10x workflow
  The workflow runs [cellranger count](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/6.0/using/count),
  on fastq files generated by the 10x single cell RNA workflow methodology.
  Cell ranger count performs alignment, barcode counting, and filtering.
  [SoupX](https://github.com/constantAmateur/SoupX) is used for subtraction of the RNA background.
  [Scrublet](https://github.com/swolock/scrublet) is used to score and predict doublets.
  Decontaminated outputs are aggregated using the [Seurat](https://satijalab.org/seurat/) R package from the Satija lab at the New York Genome Center.
  Original workflow design heavily contributed to by Erin Reichenbee of DBHi.
  A custom QC R markdown notebook developed by @AntoniaChroni is also run, which includes as it's main engine Seurat and [scooter](https://github.com/igordot/scooter)

  ## Tools Ran

  - Cellranger 6.0.0
  - soupX 4.1.0
  - scrublet 0.2.3
  - Seurat 4.0.4

  ## Inputs
  ### multi-step
  - `output_basename`: basename used to name output files
  - `sample_name`: used as prefix for finding fastqs to analyze, e.g. 1k_PBMCs_TotalSeq_B_3p_LT_antibody if the names of the underlying fastqs are of the form 1k_PBMCs_TotalSeq_B_3p_LT_antibody_S1_L001_I1_001.fastq.gz, one per input fastq in the same order
  ### optional concat and rename step
  - `corrected_read_1_name`: corrected read one names in the 10x expected format 'SampleName_S1_L001_R1_001'. When provided, must be in the same order and same length as the sample name and corrected_read_2_name arrays.
  - `corrected_read_2_name`: corrected read two names in the 10x expected format 'SampleName_S1_L001_R2_001'. When provided, must be in the same order and same length as the sample name and corrected_read_1_name arrays.
  ### cell ranger
  - `cr_localcores`: Num cores to use for cell ranger, default: 36 
  - `cr_instance_ram`: Ram in GB to make available to cell ranger count step, default: 64
  - `fastq_dir`: directory of fastqs being run. If formatting needed, use r1 and r2 fastqs input instead
  - `r1_fastqs`: If fastqs need to be concat from an old format, populate this
  - `r2_fastqs`: If fastqs need to be concat from an old format, populate this
  - `reference`: directory of reference files
  - `no_bam`: Set to skip generating bam output. Good to keep bam for troubleshooting, but adds to computation time
  - `chemistry`:
    - `auto`: for auto-detection (default)
    - `threeprime`: for Single Cell 3′
    - `fiveprime`: for Single Cell 5′
    - `SC3Pv2`: for Single Cell 3′ v2
    - `SC3Pv3`: for Single Cell 3′ v3
    - `SC3Pv3LT`: for Single Cell 3′ v3 LT
    - `SC3Pv3HT`: for Single Cell 3′ v3 HT
    - `SC5P-PE`: for Single Cell 5′ paired-end (both R1 and R2 are used for alignment)
    - `SC5P-R2`: for Single Cell 5′ R2-only (where only R2 is used for alignment)
    - `SC3Pv1`: for Single Cell 3′ v1. NOTE: this mode cannot be auto-detected. It must be set explicitly with this option
    - `ARC-v1`: for analyzing the GEX portion of multiome data. NOTE: this mode cannot be auto-detected
  ### scrublet
  - `expected_doublet_rate`: expected doublet rate, usually specific to the method; default 0.06 for 10X
  - `doublet_score_threshold`: doublet cut-off, cells with greater scores will be labelled as doublets; must be between 0 and 1
  - `count_min`: minimum expression count to retain a gene
  - `cell_min`: minimum number of cells a gene must be in to be retained
  - `min_gene_variability_pctl`: Keep the most highly variable genes (in the top min_gene_variability_pctl percentile), as measured by the v-statistic
  - `n_prin_comps`: Number of PCs to use for clustering
  - `ram`: In GB
  - `cpus`: Number of CPUs to request
  ### seurat qc
  - `seurat_qc_min_genes`: minimum number of genes per cell
  - `seurat_qc_max_genes`: maximum number of genes per cell
  - `seurat_qc_max_mt`: maximum percent mitochondrial reads per cell
  - `seurat_qc_normalize_method`: normalization method. One of log_norm or sct
  - `seurat_qc_nfeatures`: number of variable features to extract
  - `seurat_qc_num_pcs`: number of PCs to calculate

  ### Outputs
  ```yaml
    bam_out: { type: 'File?', outputSource: count/bam }
    decontam_matrix: { type: File, outputSource: seurat_merge/merged_matrix }
    decontam_object: { type: File, outputSource: seurat_merge/merged_object }
    doublet_histogram: { type: File, outputSource: scrublet/score_histogram }
    debug_cr_file_outputs: { type: 'Directory?', outputSource: count/whole_output_dir }
    seurat_qc_html: { type: File, outputSource: seurat_qc/summary_html}

requirements:
  ScatterFeatureRequirement: {}
  StepInputExpressionRequirement: {}
  InlineJavascriptRequirement: {}

inputs:
  # multi-step
  output_basename: { type: string, doc: "basename used to name output files" }
  sample_name: { type: 'string', doc: "used as prefix for finding fastqs to analyze, e.g. 1k_PBMCs_TotalSeq_B_3p_LT_antibody if the names of the underlying fastqs are of the form 1k_PBMCs_TotalSeq_B_3p_LT_antibody_S1_L001_I1_001.fastq.gz, one per input fastq in the same order" }
  # optional concat and rename step
  corrected_read_1_name: { type: 'string?', doc: "corrected read one names in the 10x expected format 'SampleName_S1_L001_R1_001'. When provided, must be in the same order and same length as the sample name and corrected_read_2_name arrays." }
  corrected_read_2_name: { type: 'string?', doc: "corrected read two names in the 10x expected format 'SampleName_S1_L001_R2_001'. When provided, must be in the same order and same length as the sample name and corrected_read_1_name arrays." }
  # cell ranger
  cr_localcores: { type: 'int?', doc: "Num cores to use for cell ranger", default: 36 }
  cr_instance_ram: { type: 'int?', doc: 'Ram in GB to make available to cell ranger count step', default: 64}
  fastq_dir: { type: 'Directory?', doc: "directory of fastqs being run. If formatting needed, use r1 and r2 fastqs input instead" }
  r1_fastqs: { type: 'File[]?', doc: "If fastqs need to be concat from an old format, populate this" }
  r2_fastqs: { type: 'File[]?', doc: "If fastqs need to be concat from an old format, populate this" }
  reference: { type: 'Directory', doc: "directory of reference files" }
  no_bam: { type: 'boolean?', doc: "Set to skip generating bam output. Good to keep bam for troubleshooting, but adds to computation time" }
  include_introns: { type: 'boolean?', doc: "Include intronic reads in count", default: false }
  chemistry: { type: ['null', {type: enum, name: chemistry, symbols: ["auto","threeprime","fiveprime","SC3Pv2","SC3Pv3","SC3Pv3LT","SC3Pv3HT","SC5P-PE","SC5P-R2","SC3Pv1","ARC-v1"]}],
    default: "auto", doc: "Chemistry used. auto is usually best. See README for exceptions" }

  # scrublet
  expected_doublet_rate: { type: 'float?', default: 0.06, doc: "expected doublet rate, usually specific to the method; default 0.06 for 10X" }
  doublet_score_threshold: { type: 'float?', default: 0.25, doc: "doublet cut-off, cells with greater scores will be labelled as doublets; must be between 0 and 1" }
  count_min: { type: 'int?', default: 2, doc: "minimum expression count to retain a gene" }
  cell_min: { type: 'int?', default: 3, doc: "minimum number of cells a gene must be in to be retained" }
  min_gene_variability_pctl: { type: 'int?', default: 85, doc: "Keep the most highly variable genes (in the top min_gene_variability_pctl percentile), as measured by the v-statistic" }
  n_prin_comps: { type: 'int?', default: 10, doc: "Number of PCs to use for clustering" }
  ram: { type: 'int?', default: 16, doc: "In GB" }
  cpus: { type: 'int?', default: 1, doc: "Number of CPUs to request" }

  # seurat qc
  seurat_qc_min_genes: { type: "int?", doc: "minimum number of genes per cell", default: 400 }
  seurat_qc_max_genes: { type: "int?", doc: "maximum number of genes per cell", default: 4000 }
  seurat_qc_max_mt: { type: "int?", doc: "maximum percent mitochondrial reads per cell", default: 5 }
  seurat_qc_normalize_method: { type: ['null', {type: enum, name: normalize_method, symbols: ["log_norm","sct"]}],
    default: "log_norm", doc: "normalization method. One of log_norm or sct" }
  seurat_qc_nfeatures: { type: "int?", doc: "number of variable features to extract", default: 2000 }
  seurat_qc_num_pcs: { type: "int?", doc: "number of PCs to calculate", default: 30 }


outputs:
  bam_out: { type: 'File?', outputSource: count/bam }
  decontam_matrix: { type: File, outputSource: seurat_merge/merged_matrix }
  decontam_object: { type: File, outputSource: seurat_merge/merged_object }
  doublet_histogram: { type: File, outputSource: scrublet/score_histogram }
  debug_cr_file_outputs: { type: 'Directory?', outputSource: count/whole_output_dir }
  seurat_qc_html: { type: File, outputSource: seurat_qc/summary_html}

steps:

  concat_rename_fastq:
    run: ../tools/concat_rename_fastq.cwl
    when: $(inputs.r1_fastqs != null)
    in:
      r1_fastqs: r1_fastqs
      r2_fastqs: r2_fastqs
      sample_name: sample_name
      corrected_read_1_name: corrected_read_1_name
      corrected_read_2_name: corrected_read_2_name
    out: [renamed_dir]

  count:
    run: ../tools/cellranger_count.cwl
    in:
      localcores: cr_localcores
      cr_instance_ram: cr_instance_ram
      run_id: output_basename
      fastqs: 
        source: [concat_rename_fastq/renamed_dir, fastq_dir]
        pickValue: first_non_null
      sample_name: sample_name
      reference: reference
      no_bam: no_bam
      return_h5:
        valueFrom: ${return Boolean(true)}
      include_introns: include_introns
      chemistry: chemistry
    out: [filtered_matrix_out, raw_matrix_out, bam, whole_output_dir, cluster_file]

  soupx:
    run: ../tools/soupx.cwl
    in:
      raw_matrix: count/raw_matrix_out
      filtered_matrix: count/filtered_matrix_out
      cluster_file: count/cluster_file
      sample_name: sample_name
    out: [decontaminated_matrix]

  scrublet:
    run: ../tools/scrublet.cwl
    in:
      input_matrix: soupx/decontaminated_matrix
      output_basename: sample_name
      expected_doublet_rate: expected_doublet_rate
      doublet_score_threshold: doublet_score_threshold
      count_min: count_min
      cell_min: cell_min
      min_gene_variability_pctl: min_gene_variability_pctl
      n_prin_comps: n_prin_comps
      ram: ram
      cpus: cpus
    out: [score_histogram, doublets_file]

  seurat_merge:
    run: ../tools/seurat_merge.cwl
    in:
      matrix_dirs: 
        source: soupx/decontaminated_matrix
        valueFrom: |
          $([self])
      doublets_files:
        source: scrublet/doublets_file
        valueFrom: |
          $([self])
      output_name: output_basename
    out: [merged_matrix, merged_object]

  seurat_qc:
    run: ../tools/seurat_qc.cwl
    in:
      filtered_bc_matrix_dir: count/whole_output_dir
      sample_name: sample_name
      min_genes: seurat_qc_min_genes
      max_genes: seurat_qc_max_genes
      max_mt: seurat_qc_max_mt
      normalize_method: seurat_qc_normalize_method
      nfeatures: seurat_qc_nfeatures
      num_pcs: seurat_qc_num_pcs
    out: [result_dir, summary_html]
