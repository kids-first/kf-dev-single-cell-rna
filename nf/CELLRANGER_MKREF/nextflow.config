params {
    fasts = ""
    gtf = ""
    out_genome_name = ""
    attribute_filter = "gene_biotype:protein_coding"
    cr_cpus = 8
    cr_ram = 60 // in GB

    // misc
    max_memory = "128 GB"
    max_time = "12h"
    max_cpus = 96
    outdir = "./results"
    // platform flags
    aws_test_instance = false
    sbg_run = false
}

includeConfig 'conf/base.config'
includeConfig 'conf/kids_first.config'
if (params.aws_test_instance){ includeConfig 'conf/aws_instance_test.config' }
if (params.sbg_run){ includeConfig 'conf/sbg.config' }

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
// from: https://github.com/nf-core/sarek/blob/master/nextflow.config
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
