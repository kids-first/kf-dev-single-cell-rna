def match_instance_type(num_cpus, task_ram){
    println "Matching instance type for ${num_cpus} cpus and ${task_ram} GB RAM"
    if (num_cpus <= 8) {
        if (task_ram <= 16) return 'c6i.2xlarge'
        else if (16 < task_ram && task_ram <= 32) return 'm6i.2xlarge'
        else return 'r6i.2xlarge' // max out at 64 GB for 8 core
    }
    else if (num_cpus <= 16) {
        if (task_ram <= 32) return 'c6i.4xlarge'
        else if (32 < task_ram && task_ram <= 64) return 'm6i.4xlarge'
        else return 'r6i.4xlarge' // max out at 128 GB for 16 core
    }
    else if (num_cpus <= 32) {
        if (task_ram <= 64) return 'c6i.8xlarge'
        else if (64 < task_ram && task_ram <= 128) return 'm6i.8xlarge'
        else return 'r6i.8xlarge' // max out at 256 GB for 32 core
    }
    else (num_cpus <= 64) {
        if (task_ram <= 128) return 'c6i.16xlarge'
        else if (128 < task_ram && task_ram <= 256) return 'm6i.16xlarge'
        else return 'r6i.16xlarge' // max out at 512 GB for 64 core
    }
}

process {
    // Clear out FASTQs, transcriptome, and output dir results, as the tar ball will suffice
    withName: COUNT {
        afterScript = { "rm -rf fastqs ${reads.join(' ')} ${mates.join(' ')} ${indices ? indicies.join('') : ""} $transcriptome $sample" }
        $sbgAWSInstanceHint = match_instance_type(params.cr_cpus, params.cr_ram)
    }
    withName: MULTI {
        afterScript = { "rm -rf FASTQS $sample_sheet $probe_set_csv $transcriptome $library_fastq_id" }
        $sbgAWSInstanceHint = match_instance_type(params.cr_cpus, params.cr_ram)
    }
    withName: UNTAR_REF {
        afterScript = { "rm $tar_file" }
        $sbgAWSInstanceHint = 'c6i.2xlarge'
    }
}